<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\WorkSchedule;
use App\Models\Attendance;
use App\Models\AttendancePermit;
use Carbon\Carbon;

class AttendancePermitSeeder extends Seeder
{
    public function run(): void
    {
        $hrs = User::where('role', 'hr')->pluck('id')->toArray();

        // Ambil semua WorkSchedule yang aktif dan ada working_time
        $workSchedules = WorkSchedule::with('attendance', 'user')
            ->whereNotNull('working_time_id')
            ->get();

        foreach ($workSchedules as $schedule) {
            // Skip kalau ada attendance
            if ($schedule->attendance) {
                continue;
            }

            $user = $schedule->user;

            // Random tipe permit
            $types = ['leave', 'sick_during_work', 'urgent_leave', 'late_arrival', 'early_departure'];
            $permitType = $types[array_rand($types)];

            // Ambil sisa quota
            $quota = $user->leaveQuota(Carbon::parse($schedule->work_date)->year);

            $startDate = Carbon::parse($schedule->work_date);
            $endDate = $startDate;

            if ($permitType === 'leave') {
                $maxDays = min(5, $quota['sisa_cuti']);
                if ($maxDays <= 0) continue; // skip jika cuti habis
                $additionalDays = rand(1, $maxDays);
                $endDate = $startDate->copy()->addDays($additionalDays - 1);
            } elseif (in_array($permitType, ['sick_during_work', 'urgent_leave', 'late_arrival', 'early_departure'])) {
                $maxDays = min(5, $quota['sisa_izin']);
                if ($maxDays <= 0) continue; // skip jika izin habis
                $additionalDays = rand(1, $maxDays);
                $endDate = $startDate->copy()->addDays($additionalDays - 1);
            }

            $statusOptions = ['pending', 'rejected', 'withdraw', 'approved'];
            $status = $statusOptions[array_rand($statusOptions)];

            $approvedBy = null;
            $approvedAt = null;
            $approvalNotes = null;

            if ($status === 'approved' && count($hrs) > 0) {
                $approvedBy = $hrs[array_rand($hrs)];
                $approvedAt = now();
                $approvalNotes = 'Auto-approved by seeder';
            }

            AttendancePermit::create([
                'user_id'        => $user->id,
                'start_date'     => $startDate->toDateString(),
                'end_date'       => $endDate->toDateString(),
                'total_day'      => $startDate->diffInDays($endDate) + 1,
                'type'           => $permitType,
                'reason'         => 'Generated by seeder',
                'attachment'     => null,
                'status'         => $status,
                'approved_by'    => $approvedBy,
                'approved_at'    => $approvedAt,
                'approval_notes' => $approvalNotes,
                'created_at'     => now(),
                'updated_at'     => now(),
            ]);
        }
    }
}
